//  .d8888b.           888
// d88P  Y88b          888
// 888    888          888
// 888         8888b.  888  .d8888b
// 888            "88b 888 d88P"
// 888    888 .d888888 888 888
// Y88b  d88P 888  888 888 Y88b.
//  "Y8888P"  "Y888888 888  "Y8888P
// 
// The proper IJVM calculator, by Arthur
// 
// Doesn't use any extensions, just good old calculator with reverse polish
// notation, supports
// 
//   \d+  - number input
//   +    - addition
//   -    - subtraction
//   *    - multiplication
//   /    - division
//   !    - factorial
//   &    - and
//   |    - or
//   ~    - not
//   ^    - xor
//   ?    - print number
//   d    - duplicate
//   m    - most significant bit
//   >    - max
//   <    - min
// 

.constant
    B00000002       0x00000002
    B00000008       0x00000008
    B0000000C       0x0000000c
    B00000020       0x00000020
    B00000080       0x00000080
    B000000C0       0x000000c0
    B000000F0       0x000000f0
    B00000200       0x00000200
    B00000800       0x00000800
    B00000C00       0x00000c00
    B00002000       0x00002000
    B00008000       0x00008000
    B0000C000       0x0000c000
    B0000F000       0x0000f000
    B0000FF00       0x0000ff00
    B00020000       0x00020000
    B00080000       0x00080000
    B000C0000       0x000c0000
    B00200000       0x00200000
    B00800000       0x00800000
    B00C00000       0x00c00000
    B00F00000       0x00f00000
    B02000000       0x02000000
    B08000000       0x08000000
    B0C000000       0x0c000000
    B20000000       0x20000000
    B80000000       0x80000000
    BC0000000       0xc0000000
    BF0000000       0xf0000000
    BFF000000       0xff000000
    BFFFF0000       0xffff0000
    BITMASK_INVSIGN 0x7fffffff
    BITMASK_SIGNBIT 0x80000000
    NOT_PATTERN1    0xAAaaAAaa
    NOT_PATTERN2    0x55555555
    _OBJREF         0xdeadc001
.end-constant

.main
  LDC_W _OBJREF
  INVOKEVIRTUAL _main
  IFEQ success
error:
  ERR
success:
  HALT
.end-main

.method _main()
.var
  char
  on_stack
  tmp1
  tmp2
.end-var

  BIPUSH 0
  ISTORE on_stack

read: IN
  ISTORE char
read_loop:
  ILOAD char
  BIPUSH 48
  ISUB
  IFLT read_other
  ILOAD char
  BIPUSH 58
  ISUB
  IFLT read_number

read_other:
  ILOAD char
  IFEQ done
  ILOAD char
  BIPUSH 32
  IF_ICMPEQ read
  ILOAD char
  BIPUSH 10
  IF_ICMPEQ read
  ILOAD char
  BIPUSH 9
  IF_ICMPEQ read
  ILOAD char
  BIPUSH 43
  IF_ICMPEQ apply_add
  ILOAD char
  BIPUSH 45
  IF_ICMPEQ apply_sub
  ILOAD char
  BIPUSH 42
  IF_ICMPEQ apply_mul
  ILOAD char
  BIPUSH 47
  IF_ICMPEQ apply_div
  ILOAD char
  BIPUSH 37
  IF_ICMPEQ apply_mod
  ILOAD char
  BIPUSH 33
  IF_ICMPEQ apply_fac
  ILOAD char
  BIPUSH 38
  IF_ICMPEQ apply_and
  ILOAD char
  BIPUSH 124
  IF_ICMPEQ apply_or
  ILOAD char
  BIPUSH 126
  IF_ICMPEQ apply_not
  ILOAD char
  BIPUSH 94
  IF_ICMPEQ apply_xor
  ILOAD char
  BIPUSH 63
  IF_ICMPEQ apply_print
  ILOAD char
  BIPUSH 120
  IF_ICMPEQ apply_print_hex
  ILOAD char
  BIPUSH 100
  IF_ICMPEQ apply_dup
  ILOAD char
  BIPUSH 109
  IF_ICMPEQ apply_msb
  ILOAD char
  BIPUSH 62
  IF_ICMPEQ apply_max
  ILOAD char
  BIPUSH 60
  IF_ICMPEQ apply_min

  BIPUSH 117
  OUT
  BIPUSH 110
  OUT
  BIPUSH 114
  OUT
  BIPUSH 101
  OUT
  BIPUSH 99
  OUT
  BIPUSH 111
  OUT
  BIPUSH 103
  OUT
  BIPUSH 110
  OUT
  BIPUSH 105
  OUT
  BIPUSH 115
  OUT
  BIPUSH 101
  OUT
  BIPUSH 100
  OUT
  BIPUSH 32
  OUT
  BIPUSH 99
  OUT
  BIPUSH 104
  OUT
  BIPUSH 97
  OUT
  BIPUSH 114
  OUT
  BIPUSH 97
  OUT
  BIPUSH 99
  OUT
  BIPUSH 116
  OUT
  BIPUSH 101
  OUT
  BIPUSH 114
  OUT
  BIPUSH 32
  OUT
  BIPUSH 34
  OUT
  ILOAD char
  OUT
  BIPUSH 34
  OUT
  BIPUSH 10
  OUT
  ERR

apply_add:
  ILOAD on_stack
  BIPUSH 2
  ISUB
  IFLT require_2
  IINC on_stack -1

  IADD
  GOTO read

apply_sub:
  ILOAD on_stack
  BIPUSH 2
  ISUB
  IFLT require_2
  IINC on_stack -1

  ISUB
  GOTO read

apply_mul:
  ILOAD on_stack
  BIPUSH 2
  ISUB
  IFLT require_2
  IINC on_stack -1

  ISTORE tmp2
  ISTORE tmp1
  LDC_W _OBJREF
  ILOAD tmp1
  ILOAD tmp2
  INVOKEVIRTUAL mul
  GOTO read

apply_div:
  ILOAD on_stack
  BIPUSH 2
  ISUB
  IFLT require_2
  IINC on_stack -1

  ISTORE tmp2
  ISTORE tmp1
  LDC_W _OBJREF
  ILOAD tmp1
  ILOAD tmp2
  INVOKEVIRTUAL div
  GOTO read

apply_mod:
  ILOAD on_stack
  BIPUSH 2
  ISUB
  IFLT require_2
  IINC on_stack -1

  ISTORE tmp2
  ISTORE tmp1
  LDC_W _OBJREF
  ILOAD tmp1
  ILOAD tmp2
  INVOKEVIRTUAL mod
  GOTO read

apply_fac:
  ILOAD on_stack
  BIPUSH 1
  ISUB
  IFLT require_1

  ISTORE tmp1
  LDC_W _OBJREF
  ILOAD tmp1
  INVOKEVIRTUAL factorial
  GOTO read
apply_and:
  ILOAD on_stack
  BIPUSH 2
  ISUB
  IFLT require_2
  IINC on_stack -1

  IAND
  GOTO read
apply_or:
  ILOAD on_stack
  BIPUSH 2
  ISUB
  IFLT require_2
  IINC on_stack -1

  IOR
  GOTO read
apply_not:
  ILOAD on_stack
  BIPUSH 1
  ISUB
  IFLT require_1

  ISTORE tmp1
  LDC_W _OBJREF
  ILOAD tmp1
  INVOKEVIRTUAL not
  GOTO read
apply_xor:
  ILOAD on_stack
  BIPUSH 2
  ISUB
  IFLT require_2
  IINC on_stack -1

  ISTORE tmp2
  ISTORE tmp1
  LDC_W _OBJREF
  ILOAD tmp1
  ILOAD tmp2
  INVOKEVIRTUAL xor
  GOTO read
apply_print:
  ILOAD on_stack
  BIPUSH 1
  ISUB
  IFLT require_1
  IINC on_stack -1

  ISTORE tmp1
  LDC_W _OBJREF
  ILOAD tmp1
  INVOKEVIRTUAL print_number
  POP
  BIPUSH 10
  OUT
  GOTO read

apply_print_hex:
  ILOAD on_stack
  BIPUSH 1
  ISUB
  IFLT require_1
  IINC on_stack -1

  ISTORE tmp1
  LDC_W _OBJREF
  ILOAD tmp1
  INVOKEVIRTUAL print_hex_number
  POP
  BIPUSH 10
  OUT
  GOTO read

apply_dup:
  ILOAD on_stack
  BIPUSH 1
  ISUB
  IFLT require_1
  IINC on_stack 1
  DUP
  GOTO read

apply_msb:
  ILOAD on_stack
  BIPUSH 1
  ISUB
  IFLT require_1

  ISTORE tmp1
  LDC_W _OBJREF
  ILOAD tmp1
  INVOKEVIRTUAL msb_index
  GOTO read

apply_max:
  ILOAD on_stack
  BIPUSH 2
  ISUB
  IFLT require_2
  IINC on_stack -1
  ISTORE tmp2
  ISTORE tmp1
  ILOAD tmp1
  ILOAD tmp2
  ISUB
  IFLT keep_tmp2
  GOTO keep_tmp1

apply_min:
  ILOAD on_stack
  BIPUSH 2
  ISUB
  IFLT require_2
  IINC on_stack -1
  ISTORE tmp2
  ISTORE tmp1
  ILOAD tmp1
  ILOAD tmp2
  ISUB
  IFLT keep_tmp1
  GOTO keep_tmp2

keep_tmp1:
  ILOAD tmp1
  GOTO read

keep_tmp2:
  ILOAD tmp2
  GOTO read

require_1:
  BIPUSH 114
  OUT
  BIPUSH 101
  OUT
  BIPUSH 113
  OUT
  BIPUSH 117
  OUT
  BIPUSH 105
  OUT
  BIPUSH 114
  OUT
  BIPUSH 101
  OUT
  BIPUSH 115
  OUT
  BIPUSH 32
  OUT
  BIPUSH 110
  OUT
  BIPUSH 117
  OUT
  BIPUSH 109
  OUT
  BIPUSH 98
  OUT
  BIPUSH 101
  OUT
  BIPUSH 114
  OUT
  BIPUSH 32
  OUT
  BIPUSH 111
  OUT
  BIPUSH 110
  OUT
  BIPUSH 32
  OUT
  BIPUSH 115
  OUT
  BIPUSH 116
  OUT
  BIPUSH 97
  OUT
  BIPUSH 99
  OUT
  BIPUSH 107
  OUT
  BIPUSH 32
  OUT
  BIPUSH 98
  OUT
  BIPUSH 117
  OUT
  BIPUSH 116
  OUT
  BIPUSH 32
  OUT
  BIPUSH 110
  OUT
  BIPUSH 111
  OUT
  BIPUSH 110
  OUT
  BIPUSH 101
  OUT
  BIPUSH 32
  OUT
  BIPUSH 102
  OUT
  BIPUSH 111
  OUT
  BIPUSH 117
  OUT
  BIPUSH 110
  OUT
  BIPUSH 100
  OUT
  BIPUSH 10
  OUT
  ERR

require_2:
  BIPUSH 111
  OUT
  BIPUSH 112
  OUT
  BIPUSH 101
  OUT
  BIPUSH 114
  OUT
  BIPUSH 97
  OUT
  BIPUSH 116
  OUT
  BIPUSH 111
  OUT
  BIPUSH 114
  OUT
  BIPUSH 32
  OUT
  BIPUSH 114
  OUT
  BIPUSH 101
  OUT
  BIPUSH 113
  OUT
  BIPUSH 117
  OUT
  BIPUSH 105
  OUT
  BIPUSH 114
  OUT
  BIPUSH 101
  OUT
  BIPUSH 100
  OUT
  BIPUSH 32
  OUT
  BIPUSH 50
  OUT
  BIPUSH 32
  OUT
  BIPUSH 97
  OUT
  BIPUSH 114
  OUT
  BIPUSH 103
  OUT
  BIPUSH 117
  OUT
  BIPUSH 109
  OUT
  BIPUSH 101
  OUT
  BIPUSH 110
  OUT
  BIPUSH 116
  OUT
  BIPUSH 115
  OUT
  BIPUSH 32
  OUT
  BIPUSH 111
  OUT
  BIPUSH 110
  OUT
  BIPUSH 32
  OUT
  BIPUSH 115
  OUT
  BIPUSH 116
  OUT
  BIPUSH 97
  OUT
  BIPUSH 99
  OUT
  BIPUSH 107
  OUT
  ERR

read_number:
  ILOAD char
  BIPUSH 48
  ISUB
  IINC on_stack 1

number_reading_mode:
  IN
  ISTORE char

  ILOAD char
  BIPUSH 48
  ISUB
  IFLT read_other
  ILOAD char
  BIPUSH 58
  ISUB
  IFLT process_digit
  GOTO read_other

process_digit:
  // mul10
  DUP
  IADD
  DUP
  DUP
  IADD
  DUP
  IADD
  IADD

  // read digit value
  ILOAD char
  BIPUSH 48
  ISUB

  // add to stack
  IADD
  GOTO number_reading_mode

done:
  // undo junk on stack
  ILOAD on_stack
  IFEQ ret
  POP
  IINC on_stack -1
  GOTO done

ret:
  BIPUSH 0
  IRETURN

.end-method

.method div(a, b)
.var
  signed
  res
  k
  bshift
.end-var
  // store the signed state
  BIPUSH 0
  ISTORE signed

  // get absolute of a and b
ha:
  ILOAD a
  IFLT negate_a
hb:
  ILOAD b
  IFLT negate_b
handled:

  BIPUSH 0
  ISTORE res

  // edge case if a < b, we're done
  ILOAD a
  ILOAD b
  ISUB
  IFLT apply_sign

  // edge case if b == 0, we error
  ILOAD b
  IFEQ division_by_zero

  BIPUSH 1
  ISTORE k
  ILOAD b
  ISTORE bshift

  // build a stack of kn, kn * b, kn-1, kn-1 * b, ..., k0 (1), k0 * b (b)
build_stack:
  ILOAD a
  ILOAD bshift
  ISUB
  IFLT stack_unwind

  // push bshift to stack and bshift += bshift
  ILOAD bshift
  DUP
  DUP
  IADD
  ISTORE bshift

  // push k to stack and k += k
  ILOAD k
  DUP
  DUP
  IADD
  ISTORE k
  GOTO build_stack

stack_unwind:
  ISTORE k // stores k from (k * b) in size

  // a - (k * b)
  ILOAD a
  SWAP
  ISUB

  // duplicate a - (k * b) on stack
  DUP

  // if (a  - (k * b) < 0) cant_substract
  IFLT cant_substract

substract:
  // store a = a - k * b
  ISTORE a

  // calculate res
  ILOAD res
  ILOAD k
  IADD
  ISTORE res

  ILOAD k
  BIPUSH 1
  IF_ICMPEQ apply_sign
  GOTO stack_unwind

cant_substract:
  // pop a - (k * b) from the stack
  POP

  ILOAD k
  BIPUSH 1
  IF_ICMPEQ apply_sign
  GOTO stack_unwind

apply_sign:
  ILOAD signed
  IFEQ ret_res
  BIPUSH 0
  ILOAD res
  ISUB
  IRETURN
ret_res:
  ILOAD res
  IRETURN

negate_a:
  BIPUSH 0
  ILOAD a
  ISUB
  ISTORE a
  IINC signed 1
  GOTO hb
negate_b:
  BIPUSH 0
  ILOAD b
  ISUB
  ISTORE b
  IINC signed 1
  GOTO handled

division_by_zero:
  BIPUSH 100
  OUT
  BIPUSH 105
  OUT
  BIPUSH 118
  OUT
  BIPUSH 32
  OUT
  BIPUSH 98
  OUT
  BIPUSH 121
  OUT
  BIPUSH 32
  OUT
  BIPUSH 48
  OUT
  BIPUSH 10
  OUT
  ERR
.end-method

.method factorial(x)
.var
  res
.end-var
  ILOAD x
  IFEQ ret_1

  ILOAD x
  ISTORE res

loop:
  IINC x -1
  ILOAD x
  BIPUSH 1
  ISUB
  IFLT done
  LDC_W _OBJREF
  ILOAD res
  ILOAD x
  INVOKEVIRTUAL mul
  ISTORE res
  GOTO loop

done:
  ILOAD res
  IRETURN

ret_1:
  BIPUSH 1
  IRETURN
.end-method

.method hex_helper(x)
.var
  divisor
.end-var

start:
  ILOAD x
  BIPUSH 10
  ISUB
  IFLT print_digit
  ILOAD x
  BIPUSH 17
  ISUB
  IFLT print_hex

  // calculate a / 16
  LDC_W _OBJREF
  ILOAD x
  BIPUSH 16
  INVOKEVIRTUAL div
  ISTORE divisor

  // recursive call to print_number
  LDC_W _OBJREF
  ILOAD divisor
  INVOKEVIRTUAL hex_helper
  POP

  // set x to x - (x / 16) * 16
  ILOAD x
  ILOAD divisor
  DUP
  IADD
  DUP
  IADD
  DUP
  IADD
  DUP
  IADD
  ISUB
  ISTORE x
  GOTO start

print_digit:
  ILOAD x
  BIPUSH 48
  IADD
  OUT
  BIPUSH 0
  IRETURN

print_hex:
  ILOAD x
  BIPUSH 10
  ISUB
  BIPUSH 97
  IADD
  OUT
  BIPUSH 0
  IRETURN
.end-method

.method mod(a,b)
  ILOAD a
  LDC_W _OBJREF
  LDC_W _OBJREF
  ILOAD a
  ILOAD b
  INVOKEVIRTUAL div
  ILOAD b
  INVOKEVIRTUAL mul
  ISUB
  IRETURN
.end-method

.method msb_index(x)
lbffffffff: ILOAD x
  LDC_W BFFFF0000
  IAND
  IFEQ lb0000ffff
lbffff0000: ILOAD x
  LDC_W BFF000000
  IAND
  IFEQ lb00ff0000
lbff000000: ILOAD x
  LDC_W BF0000000
  IAND
  IFEQ lb0f000000
lbf0000000: ILOAD x
  LDC_W BC0000000
  IAND
  IFEQ lb30000000
lbc0000000: ILOAD x
  LDC_W B80000000
  IAND
  IFEQ lb40000000
lb80000000: BIPUSH 32
  IRETURN
lb40000000: BIPUSH 31
  IRETURN
lb30000000: ILOAD x
  LDC_W B20000000
  IAND
  IFEQ lb10000000
lb20000000: BIPUSH 30
  IRETURN
lb10000000: BIPUSH 29
  IRETURN
lb0f000000: ILOAD x
  LDC_W B0C000000
  IAND
  IFEQ lb03000000
lb0c000000: ILOAD x
  LDC_W B08000000
  IAND
  IFEQ lb04000000
lb08000000: BIPUSH 28
  IRETURN
lb04000000: BIPUSH 27
  IRETURN
lb03000000: ILOAD x
  LDC_W B02000000
  IAND
  IFEQ lb01000000
lb02000000: BIPUSH 26
  IRETURN
lb01000000: BIPUSH 25
  IRETURN
lb00ff0000: ILOAD x
  LDC_W B00F00000
  IAND
  IFEQ lb000f0000
lb00f00000: ILOAD x
  LDC_W B00C00000
  IAND
  IFEQ lb00300000
lb00c00000: ILOAD x
  LDC_W B00800000
  IAND
  IFEQ lb00400000
lb00800000: BIPUSH 24
  IRETURN
lb00400000: BIPUSH 23
  IRETURN
lb00300000: ILOAD x
  LDC_W B00200000
  IAND
  IFEQ lb00100000
lb00200000: BIPUSH 22
  IRETURN
lb00100000: BIPUSH 21
  IRETURN
lb000f0000: ILOAD x
  LDC_W B000C0000
  IAND
  IFEQ lb00030000
lb000c0000: ILOAD x
  LDC_W B00080000
  IAND
  IFEQ lb00040000
lb00080000: BIPUSH 20
  IRETURN
lb00040000: BIPUSH 19
  IRETURN
lb00030000: ILOAD x
  LDC_W B00020000
  IAND
  IFEQ lb00010000
lb00020000: BIPUSH 18
  IRETURN
lb00010000: BIPUSH 17
  IRETURN
lb0000ffff: ILOAD x
  LDC_W B0000FF00
  IAND
  IFEQ lb000000ff
lb0000ff00: ILOAD x
  LDC_W B0000F000
  IAND
  IFEQ lb00000f00
lb0000f000: ILOAD x
  LDC_W B0000C000
  IAND
  IFEQ lb00003000
lb0000c000: ILOAD x
  LDC_W B00008000
  IAND
  IFEQ lb00004000
lb00008000: BIPUSH 16
  IRETURN
lb00004000: BIPUSH 15
  IRETURN
lb00003000: ILOAD x
  LDC_W B00002000
  IAND
  IFEQ lb00001000
lb00002000: BIPUSH 14
  IRETURN
lb00001000: BIPUSH 13
  IRETURN
lb00000f00: ILOAD x
  LDC_W B00000C00
  IAND
  IFEQ lb00000300
lb00000c00: ILOAD x
  LDC_W B00000800
  IAND
  IFEQ lb00000400
lb00000800: BIPUSH 12
  IRETURN
lb00000400: BIPUSH 11
  IRETURN
lb00000300: ILOAD x
  LDC_W B00000200
  IAND
  IFEQ lb00000100
lb00000200: BIPUSH 10
  IRETURN
lb00000100: BIPUSH 9
  IRETURN
lb000000ff: ILOAD x
  LDC_W B000000F0
  IAND
  IFEQ lb0000000f
lb000000f0: ILOAD x
  LDC_W B000000C0
  IAND
  IFEQ lb00000030
lb000000c0: ILOAD x
  LDC_W B00000080
  IAND
  IFEQ lb00000040
lb00000080: BIPUSH 8
  IRETURN
lb00000040: BIPUSH 7
  IRETURN
lb00000030: ILOAD x
  LDC_W B00000020
  IAND
  IFEQ lb00000010
lb00000020: BIPUSH 6
  IRETURN
lb00000010: BIPUSH 5
  IRETURN
lb0000000f: ILOAD x
  LDC_W B0000000C
  IAND
  IFEQ lb00000003
lb0000000c: ILOAD x
  LDC_W B00000008
  IAND
  IFEQ lb00000004
lb00000008: BIPUSH 4
  IRETURN
lb00000004: BIPUSH 3
  IRETURN
lb00000003: ILOAD x
  LDC_W B00000002
  IAND
  IFEQ lb00000001
lb00000002: BIPUSH 2
  IRETURN
lb00000001: ILOAD x
  IFEQ lb00000000
  BIPUSH 1
  IRETURN
lb00000000: BIPUSH 0
  IRETURN
.end-method

.method mul(a, b)
.var
  signed
  res
  pow2
  sum
.end-var

  // store the signed state
  ILOAD a
  LDC_W BITMASK_SIGNBIT
  IAND
  ILOAD b
  LDC_W BITMASK_SIGNBIT
  IAND
  IADD
  ISTORE signed

  // get absolute of a and b
hsa: ILOAD a
  IFLT negate_a
hsb: ILOAD b
  IFLT negate_b

for_init:
  BIPUSH 0
  ISTORE res   // result
  BIPUSH 1
  ISTORE pow2  // 2^n
  ILOAD b
  ISTORE sum   // b * 2^n

for_loop:
  // if (a < (1 << n)) -> done
  ILOAD a
  ILOAD pow2
  ISUB
  IFLT apply_sign

  // if (a & (1 << n) == 0) continue
  ILOAD a
  ILOAD pow2
  IAND
  IFEQ for_update

  // res += b * 2^n
  ILOAD res
  ILOAD sum
  IADD
  ISTORE res

for_update:
  ILOAD pow2
  DUP
  IADD
  ISTORE pow2
  ILOAD sum
  DUP
  IADD
  ISTORE sum
  GOTO for_loop

negate_a:
  BIPUSH 0
  ILOAD a
  ISUB
  ISTORE a
  GOTO hsb
negate_b:
  BIPUSH 0
  ILOAD b
  ISUB
  ISTORE b
  GOTO for_init

apply_sign:
  // res possibly overflowed, apply positive filter
  ILOAD res
  LDC_W BITMASK_INVSIGN
  IAND
  ILOAD signed
  IFEQ ret_res
  BIPUSH 0
  SWAP
  ISUB
  IRETURN

ret_res:
  IRETURN
.end-method

.method not(x)
  ILOAD x
  LDC_W NOT_PATTERN1
  IAND
  LDC_W NOT_PATTERN1
  IADD
  LDC_W NOT_PATTERN1
  IAND
  ILOAD x
  LDC_W NOT_PATTERN2
  IAND
  LDC_W NOT_PATTERN2
  IADD
  LDC_W NOT_PATTERN2
  IAND
  IOR
  IRETURN
.end-method

.method print_hex_number(x)
  ILOAD x
  IFLT print_minus
print:
  BIPUSH 48
  OUT
  BIPUSH 120
  OUT
  LDC_W _OBJREF
  ILOAD x
  INVOKEVIRTUAL hex_helper
  IRETURN
print_minus:
  BIPUSH 45
  OUT
  BIPUSH 0
  ILOAD x
  ISUB
  ISTORE x
  GOTO print
.end-method

.method print_number(a)
.var
  divisor
.end-var

  ILOAD a
  IFLT sign_handle
positive:
  ILOAD a
  BIPUSH 10
  ISUB
  IFLT print_digit

  // calculate a / 10
  LDC_W _OBJREF
  ILOAD a
  BIPUSH 10
  INVOKEVIRTUAL div
  ISTORE divisor

  // recursive call to print_number
  LDC_W _OBJREF
  ILOAD divisor
  INVOKEVIRTUAL print_number
  POP

  // set a to a - (a / 10) * 10
  ILOAD a
  ILOAD divisor
  DUP
  IADD
  DUP
  DUP
  IADD
  DUP
  IADD
  IADD
  ISUB
  ISTORE a

print_digit:
  ILOAD a
  BIPUSH 48
  IADD
  OUT

  BIPUSH 0
  IRETURN

sign_handle:
  BIPUSH 45
  OUT
  BIPUSH 0
  ILOAD a
  ISUB
  ISTORE a
  GOTO positive
.end-method

.method xor(x,y)
  ILOAD x
  LDC_W NOT_PATTERN1
  IAND
  ILOAD y
  LDC_W NOT_PATTERN1
  IAND
  IADD
  LDC_W NOT_PATTERN1
  IAND
  ILOAD x
  LDC_W NOT_PATTERN2
  IAND
  ILOAD y
  LDC_W NOT_PATTERN2
  IAND
  IADD
  LDC_W NOT_PATTERN2
  IAND
  IOR
  IRETURN
.end-method

